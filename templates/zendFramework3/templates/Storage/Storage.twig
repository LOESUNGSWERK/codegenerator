<?php
/**
 * @copyright  Copyright (c) 2017 TraSo GmbH (www.traso.de)
 * @author     rkuehle
 * @since      11.05.17
 */

namespace {{modulName|ucf}}\Model\{{tableName|ucf}}\Storage;

use Application\Model\Settings\Entity\SettingsEntity;
use Application\Model\Settings\Hydrator\SettingsDbHydrator;
use Zend\Db\ResultSet\ResultSet;
use Zend\Db\TableGateway\AbstractTableGateway;
use Zend\Db\TableGateway\TableGatewayInterface;

/**
 * Class {{tableName|ucf}}Storage
 * @package {{modulName|ucf}}\Model\{{tableName|ucf}}\Storage
 */
class {{tableName|ucf}}Storage
{

    /**
     * @var TableGatewayInterface|AbstractTableGateway
     */
    private $tableGateway;

    /**
     * @var {{tableName|ucf}}DbHydrator
     */
    private $hydrator;

    /**
     * {{tableName|ucf}}Storage constructor.
     *
     * @param TableGatewayInterface $tableGateway
     */
    public function __construct(TableGatewayInterface $tableGateway)
    {
        $this->tableGateway = $tableGateway;
        $this->hydrator = new {{tableName|ucf}}DbHydrator();
    }


    /**
     * @param integer $id
     * @return SettingsEntity
     */
    public function getById($id){
        $select = $this->tableGateway->getSql()->select();
        $select->where->equalTo('id', $id);
        /** @var ResultSet $resultSet */
        $resultSet = $this->tableGateway->selectWith($select);

        return $this->hydrator->hydrate( $resultSet->current() , new {{tableName|ucf}}Entity($this) );
    }

    /**
     * @param {{tableName|ucf}}Entity ${{tableName|lcf}}
     * @return bool
     */
    public function update(${{tableName|lcf}})
    {

        $update = $this->tableGateway->getSql()->update();
        $updateData = $this->hydrator->extract(${{tableName|lcf}});

        $update->set($updateData);
        $update->where->equalTo('id', ${{tableName|lcf}}->getId());

        return $this->tableGateway->updateWith($update) > 0;
    }

    /**
     * @param {{tableName|ucf}}Entity ${{tableName|lcf}}
     * @return int
     */
    public function insert(${{tableName|lcf}})
    {
        $insert = $this->tableGateway->getSql()->insert();
        $insertData = $this->hydrator->extract(${{tableName|lcf}});
        $insert->values($insertData);
        return $this->tableGateway->getLastInsertValue();
    }



}