<?php
/**
 * @copyright  Copyright (c) 2017 TraSo GmbH (www.traso.de)
 * @author     rkuehle
 * @since      11.05.17
 */

namespace {{modulName|ucf}}\Model\{{name|ucf}}\Entity;

use {{modulName|ucf}}\Model\{{name|ucf}}\Storage\{{name|ucf}}Storage;
use Zend\Hydrator\ClassMethods;


/**
 * Class SettingsEntity
 * @package {{modulName|ucf}}\Model\{{name|ucf}}\Entity;
 */
class {{name|ucf}}Entity
{


    /**
     * @var {{name|ucf}}Storage
     */
    private $storage;

    {% if fields|length > 0 %}{% for item in fields %}
    private ${{item.name|lcf}};
    {% endfor %}{% endif %}

    /**
     * {{name|ucf}}Entity constructor.
     * @param {{name|ucf}}Storage $repository
     */
    public function __construct($repository)
    {
        $this->storage = $repository;
    }

    public function toArray(){
        $help = new ClassMethods();
        return $help->extract($this);
    }

    public function reorg(){
        {% if fieldsByTypes.treePath|length > 0 %}{% for item in fieldsByTypes.treePath %}
            $this->set{{item.name|ucf}}( $this->generate{{item.name|ucf}}() );
        {% endfor %}{% endif %}
    }

    {% if fieldsByTypes.label|length > 0 %}
    private $label;
    /**
     * @return string
     */
    public function getLabel(){
        if ($this->label == null){
            $this->label = '';
            {% for item in fieldsByTypes.label %}
                if (trim($this->get{{item.name|ucf}}()) !=''){ $this->label .= trim($this->get{{item.name|ucf}}());}
            {% endfor %}
        }
        return $this->label;
    }
    {% endif %}


    {% if fields|length > 0 %}{% for item in fields %}
        {% if item.type == "treePath" %}
            {% include 'Entity/FieldTypes/treePath.html' %}
        {% elseif item.type == "boolean" %}
            {% include 'Entity/FieldTypes/boolean.html' %}
        {% else %}
            {% include 'Entity/FieldTypes/default.html' %}
        {% endif %}
    {% endfor %}{% endif %}


    {% if extras.isTree %}

    /**
     * @var XresSettingsUiEntity
     */
    private $parent;

    /**
     * @return XresSettingsUiEntity
     */
    public function getParent(){
        if ($this->parent==null){
            if ($this->hasParent()){
                $this->parent = $this->getStorage()->getById( $this->getParentId() );
            }
        }
        return $this->parent;
    }

    /**
     * @return bool
     */
    public function hasParent(){
        return ($this->getParentId() != null);
    }

    {% endif %}

}